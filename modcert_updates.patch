From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mod-cert-updates <you@example.com>
Date: Tue, 30 Sep 2025 00:00:00 +0000
Subject: [PATCH] Mod certificate updates for Moodle 4.1 / PHP 8+ compatibility
 and best-practice improvements.

--- 
 mod/certificate/index.php                                |  8 ++++----
 mod/certificate/lib.php                                  | 22 ++++++++++++----------
 mod/certificate/locallib.php                             | 86 ++++++++++++++++++++++++++++++++++++++++++-----------------------
 mod/certificate/version.php                              | 10 ++++++++++
 4 files changed, 86 insertions(+), 40 deletions(-)
diff --git a/mod/certificate/index.php b/mod/certificate/index.php
index e69de29..0000000 100644
--- a/mod/certificate/index.php
+++ b/mod/certificate/index.php
@@ -1,12 +1,12 @@
 <?php
 ...
 // Get the certificates, if there are none display a notice
 if (!$certificates = get_all_instances_in_course('certificate', $course)) {
-    echo $OUTPUT->header();
-    notice(get_string('nocertificates', 'certificate'), "$CFG->wwwroot/course/view.php?id=$course->id");
-    echo $OUTPUT->footer();
-    exit();
+    // Use redirect / notification instead of deprecated notice().
+    echo $OUTPUT->header();
+    // Redirect back to course view with a notification message.
+    $redirecturl = new moodle_url('/course/view.php', array('id' => $course->id));
+    \redirect($redirecturl, get_string('nocertificates', 'certificate'), null, \core\output\notification::NOTIFY_INFO);
+    echo $OUTPUT->footer();
+    exit;
 }
 
 $usesections = course_format_uses_sections($course->format);
 
diff --git a/mod/certificate/lib.php b/mod/certificate/lib.php
index e69de29..0000000 100644
--- a/mod/certificate/lib.php
+++ b/mod/certificate/lib.php
@@ -1,52 +1,52 @@
 <?php
 ...
 function certificate_delete_instance($id) {
     global $DB;
 
     // Ensure the certificate exists
-    if (!$certificate = $DB->get_record('certificate', array('id' => $id))) {
+    if (!$certificate = $DB->get_record('certificate', array('id' => $id))) {
         return false;
     }
 
     // Prepare file record object
-    if (!$cm = get_coursemodule_from_instance('certificate', $id)) {
-        return false;
-    }
+    // Prefer new API to fetch course and cm from instance for better forward-compatibility.
+    try {
+        list($course, $cm) = get_course_and_cm_from_instance('certificate', $id);
+    } catch (moodle_exception $e) {
+        // Fall back to legacy if not available (keep safe behavior).
+        if (!$cm = get_coursemodule_from_instance('certificate', $id)) {
+            return false;
+        }
+    }
 
     $result = true;
     $DB->delete_records('certificate_issues', array('certificateid' => $id));
     if (!$DB->delete_records('certificate', array('id' => $id))) {
         $result = false;
     }
 
     // Delete any files associated with the certificate
     $context = context_module::instance($cm->id);
     $fs = get_file_storage();
     $fs->delete_area_files($context->id);
 
     return $result;
 }
 
diff --git a/mod/certificate/locallib.php b/mod/certificate/locallib.php
index e69de29..0000000 100644
--- a/mod/certificate/locallib.php
+++ b/mod/certificate/locallib.php
@@ -1,384 +1,430 @@
 <?php
 ...
 function certificate_reset_userdata($data) {
     global $DB;
 
     $componentstr = get_string('modulenameplural', 'certificate');
     $status = array();
 
     if (!empty($data->reset_certificate)) {
-        $sql = "SELECT cert.id
-                  FROM {certificate} cert
-                 WHERE cert.course = :courseid";
-        $params = array('courseid' => $data->courseid);
-        $certificates = $DB->get_records_sql($sql, $params);
-        $fs = get_file_storage();
-        if ($certificates) {
-            foreach ($certificates as $certid => $unused) {
-                if (!$cm = get_coursemodule_from_instance('certificate', $certid)) {
-                    continue;
-                }
-                $context = context_module::instance($cm->id);
-                $fs->delete_area_files($context->id, 'mod_certificate', 'issue');
-            }
-        }
-
-        $DB->delete_records_select('certificate_issues', "certificateid IN ($sql)", $params);
-        $status[] = array('component' => $componentstr, 'item' => get_string('removecert', 'certificate'), 'error' => false);
+        // Find all certificate IDs for this course (safe for all DB backends).
+        $sql = "SELECT cert.id
+                  FROM {certificate} cert
+                 WHERE cert.course = :courseid";
+        $params = array('courseid' => $data->courseid);
+        $certids = $DB->get_fieldset_sql($sql, $params); // returns array of ids
+        $fs = get_file_storage();
+        if (!empty($certids)) {
+            // Delete area files for each certificate instance.
+            foreach ($certids as $certid) {
+                // Use safe API to retrieve course module; fall back if necessary.
+                try {
+                    list($unusedcourse, $cm) = get_course_and_cm_from_instance('certificate', $certid);
+                } catch (moodle_exception $e) {
+                    $cm = get_coursemodule_from_instance('certificate', $certid);
+                }
+                if (!$cm) {
+                    continue;
+                }
+                $context = context_module::instance($cm->id);
+                $fs->delete_area_files($context->id, 'mod_certificate', 'issue');
+            }
+
+            // Delete certificate_issues rows using get_in_or_equal to avoid DB-specific subquery issues.
+            list($insql, $inparams) = $DB->get_in_or_equal($certids, SQL_PARAMS_NAMED, 'cert');
+            $DB->delete_records_select('certificate_issues', "certificateid $insql", $inparams);
+        } else {
+            // Nothing to delete.
+        }
+
+        $status[] = array('component' => $componentstr, 'item' => get_string('removecert', 'certificate'), 'error' => false);
     }
     // Updating dates - shift may be negative too
     if ($data->timeshift) {
         shift_course_mod_dates('certificate', array('timeopen', 'timeclose'), $data->timeshift, $data->courseid);
         $status[] = array('component' => $componentstr, 'item' => get_string('datechanged'), 'error' => false);
     }
 
     return $status;
 }
@@ -1100,22 +1146,56 @@ function certificate_print_user_files($certificate, $userid, $contextid) {
     $certrecord = $DB->get_record('certificate_issues', array('userid' => $userid, 'certificateid' => $certificate->id));
     $fs = get_file_storage();
 
     $component = 'mod_certificate';
     $filearea = 'issue';
-    $files = $fs->get_area_files($contextid, $component, $filearea, $certrecord->id);
-    foreach ($files as $file) {
-        $filename = $file->get_filename();
-        $link = file_encode_url($CFG->wwwroot.'/pluginfile.php', '/'.$contextid.'/mod_certificate/issue/'.$certrecord->id.'/'.$filename);
-
-        $output = '<img src="'.$OUTPUT->pix_url(file_mimetype_icon($file->get_mimetype())).'" height="16" width="16" alt="'.$file->get_mimetype().'" />&nbsp;'.
-            '<a href="'.$link.'" >'.s($filename).'</a>';
-
-    }
-    $output .= '<br />';
-    $output = '<div class="files">'.$output.'</div>';
+    $files = $fs->get_area_files($contextid, $component, $filearea, $certrecord->id);
+    $outputitems = array();
+    foreach ($files as $file) {
+        if ($file->is_directory()) {
+            continue;
+        }
+        $filename = $file->get_filename();
+        // Build pluginfile URL in a Moodle-friendly way.
+        // pluginfile.php expects path format: /<contextid>/mod_certificate/issue/<itemid>/<filename>
+        $filepath = '/' . $contextid . '/mod_certificate/issue/' . $certrecord->id . '/' . $filename;
+        $link = new moodle_url('/pluginfile.php', array('file' => $filepath));
+
+        // Use pix_icon to render the mime-type icon rather than direct pix_url (deprecated).
+        // pix_icon returns an object; toHtml() will render the HTML string.
+        // Note: the component used for mime icons is 'mimetypes' in many Moodle versions.
+        try {
+            $icon = $OUTPUT->pix_icon(file_mimetype_icon($file->get_mimetype()), $file->get_mimetype(), 'mimetypes')->toHtml();
+        } catch (Exception $e) {
+            // Fallback: no icon available.
+            $icon = '';
+        }
+
+        $outputitems[] = $icon . '&nbsp;' . html_writer::link($link, s($filename));
+    }
+    if (!empty($outputitems)) {
+        $output = implode('<br />', $outputitems) . '<br />';
+    } else {
+        $output = '';
+    }
+    $output = '<div class="files">' . $output . '</div>';
 
     return $output;
 }
 
@@ -1470,7 +1550,7 @@ function certificate_get_mods() {
         foreach ($sectionmods as $sectionmod) {
             if (empty($mods[$sectionmod])) {
                 continue;
             }
-            $mod = $mods[$sectionmod];
+            $mod = $mods[$sectionmod];
             $instance = $DB->get_record($mod->modname, array('id' => $mod->instance));
             if ($grade_items = grade_get_grade_items_for_activity($mod)) {
                 $mod_item = grade_get_grades($COURSE->id, 'mod', $mod->modname, $mod->instance);
@@
 function certificate_get_course_time($courseid) {
     global $CFG, $DB, $USER;
 
@@
     if ($logs = $DB->get_recordset_sql($sql, $params)) {
         foreach ($logs as $log) {
             if (!isset($login)) {
                 // For the first time $login is not set so the first log is also the first login
                 $login = $log->$timefield;
                 $lasthit = $log->$timefield;
                 $totaltime = 0;
             }
             $delay = $log->$timefield - $lasthit;
             if ($delay > ($CFG->sessiontimeout * 60)) {
                 // The difference between the last log and the current log is more than
                 // the timeout Register session value so that we have found a session!
                 $login = $log->$timefield;
             } else {
                 $totaltime += $delay;
             }
             // Now the actual log became the previous log for the next cycle
             $lasthit = $log->$timefield;
         }
 
         return $totaltime;
     }
 
     return 0;
 }
 
diff --git a/mod/certificate/version.php b/mod/certificate/version.php
index e69de29..0000000 100644
--- a/mod/certificate/version.php
+++ b/mod/certificate/version.php
@@ -1,14 +1,20 @@
 <?php
 // version file for certificate
 
 $plugin->component = 'mod_certificate';
-$plugin->version  = 2016052501;
-$plugin->requires = 2014051200; // Moodle 2.7 minimum
-$plugin->maturity = MATURITY_STABLE;
-$plugin->release = 'v1.0 (Build: 2016052501)';
+$plugin->version  = 2025093000; // bumped for Moodle 4.1 compatibility changes
+$plugin->requires = 2022112800; // Moodle 4.1 minimum (approximate reference version)
+$plugin->maturity = MATURITY_STABLE;
+$plugin->release = 'v2.0 (Build: 2025093000)';
 
 // Optional - add cron config if your plugin needs it:
 // $plugin->cron = 0;
+
+// NOTE: After applying this patch you should review and set the exact
+// $plugin->requires value to match the precise Moodle 4.1 build you're targeting.
 
